{"version":3,"sources":["../es2015/timer.js"],"names":[],"mappings":";;;;;kBAsEwB;;;;AApExB,SAAS,IAAT,CAAc,GAAd,EAAmB,IAAnB,EAAyB;;AAErB,QAAI,YAAJ,CAAiB,IAAjB,EAFqB;;AAIrB,WAAO,GAAP,CAJqB;CAAzB;;AAOA,SAAS,YAAT,CAAsB,WAAtB,EAAmC;;AAE/B,QAAM,MAAM,oCAAN,CAFyB;;AAI/B,WAAO,KAAK,GAAL,EAAU,WAAV,CAAP,CAJ+B;CAAnC;;AAOA,SAAS,aAAT,CAAuB,WAAvB,EAAqE;QAAjC,4DAAM,aAAa,WAAb,iBAA2B;;AAEjE,WAAO,IAAI,aAAJ,EAAP,CAFiE;CAArE;;AAKA,SAAS,GAAT,GAAe;AAAE,WAAO,KAAK,GAAL,KAAa,IAAb,CAAT;CAAf;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,WAA3B,EAAwC,IAAxC,EAA8C;;AAE1C,WAAO,CAAC,CAAD,GAAK,IAAL,GAAY,KAAK,GAAL,CAAS,cAAc,WAAd,EAA2B,GAA3B,CAAT,CAAZ,CAFmC;CAA9C;;AAKA,SAAS,SAAT,CAAmB,IAAnB,EAAyB,WAAzB,EAAsC,IAAtC,EAA6E;QAAjC,4DAAM,aAAa,WAAb,iBAA2B;;AAEzE,QAAI,YAAY,KAAK,GAAL,EAAU,IAAV,CAAZ,CAFqE;AAGzE,QAAI,WAAW,aAAa,SAAb,EAAwB,WAAxB,EAAqC,IAArC,CAAX,CAHqE;;AAKzE,WAAO,WAAW,IAAX,CALkE;CAA7E;;AAQA,SAAS,UAAT,CAAoB,IAApB,EAA0B,WAA1B,EAAuC,IAAvC,EAA8E;QAAjC,4DAAM,aAAa,WAAb,iBAA2B;;AAE1E,QAAI,WAAW,WAAX,CAFsE;AAG1E,QAAI,oBAAJ,CAH0E;;AAK1E,WAAO,WAAW,IAAX,EAAiB;;AAEpB,mBAAW,QAAX,CAFoB;AAGpB,mBAAW,UAAU,QAAV,EAAoB,WAApB,EAAiC,IAAjC,EAAuC,GAAvC,CAAX,CAHoB;KAAxB;;AAMA,WAAO,QAAP,CAX0E;CAA9E;;AAcA,SAAS,UAAT,CAAoB,WAApB,EAAiC,GAAjC,EAAsC,IAAtC,EAA4C,OAA5C,EAAqD;;AAEjD,QAAI,IAAI,KAAJ,CAF6C;AAGjD,QAAI,OAAO,WAAW,CAAX,EAAc,WAAd,EAA2B,IAA3B,EAAiC,GAAjC,CAAP,CAH6C;AAIjD,QAAI,OAAO,UAAU,IAAV,EAAgB,WAAhB,EAA6B,IAA7B,EAAmC,GAAnC,CAAP,CAJ6C;;AAMjD,WAAO,YAAY,YAAM;;AAErB,YAAI,KAAJ,CAFqB;;AAIrB,YAAI,IAAI,IAAJ,EAAU;;AAEV,mBAAO,IAAP,CAFU;AAGV,mBAAO,UAAU,IAAV,EAAgB,WAAhB,EAA6B,IAA7B,EAAmC,GAAnC,CAAP,CAHU;;AAKV,oBAAQ,IAAR,EALU;SAAd;KAJe,EAWjB,IAXK,CAAP,CANiD;CAArD;;AAoBe,SAAS,KAAT,CAAe,WAAf,EAA4B,IAA5B,EAAkC,OAAlC,EAA2C;;AAEtD,QAAM,MAAM,aAAa,WAAb,CAAN,CAFgD;AAGtD,QAAM,WAAW,OAAO,EAAP,CAHqC;;AAKtD,QAAI,SAAS,WAAW,WAAX,EAAwB,GAAxB,EAA6B,QAA7B,EAAuC,OAAvC,CAAT,CALkD;;AAOtD,WAAO,YAAM;;AAET,sBAAc,MAAd,EAFS;KAAN,CAP+C;CAA3C","file":"timer.js","sourcesContent":["import { MersenneTwister19937 } from \"mersenne\";\n\nfunction seed(rng, seed) {\n\n    rng.init_genrand(seed);\n\n    return rng;\n}\n\nfunction freshTwister(initialSeed) {\n\n    const rng = new MersenneTwister19937();\n\n    return seed(rng, initialSeed);\n}\n\nfunction twisterNumber(initialSeed, rng = freshTwister(initialSeed)) {\n\n    return rng.genrand_real2();\n}\n\nfunction now() { return Date.now() / 1000; }\n\nfunction nextInterval(rng, initialSeed, freq) {\n\n    return -1 * freq * Math.log(twisterNumber(initialSeed, rng));\n}\n\nfunction pingAfter(time, initialSeed, freq, rng = freshTwister(initialSeed)) {\n\n    let nextState = seed(rng, time);\n    let interval = nextInterval(nextState, initialSeed, freq);\n\n    return interval + time;\n}\n\nfunction pingBefore(time, initialSeed, freq, rng = freshTwister(initialSeed)) {\n\n    let nextPing = initialSeed;\n    let lastPing;\n\n    while (nextPing < time) {\n\n        lastPing = nextPing;\n        nextPing = pingAfter(lastPing, initialSeed, freq, rng);\n    }\n\n    return lastPing;\n}\n\nfunction startTimer(initialSeed, rng, freq, handler) {\n\n    let n = now();\n    let last = pingBefore(n, initialSeed, freq, rng);\n    let next = pingAfter(last, initialSeed, freq, rng);\n\n    return setInterval(() => {\n\n        n = now();\n\n        if (n > next) {\n\n            last = next;\n            next = pingAfter(last, initialSeed, freq, rng);\n\n            handler(last);\n        }\n    },1000);\n}\n\nexport default function timer(initialSeed, freq, handler) {\n\n    const rng = freshTwister(initialSeed);\n    const freqInMS = freq * 60;\n\n    let stopID = startTimer(initialSeed, rng, freqInMS, handler);\n\n    return () => {\n\n        clearInterval(stopID);\n    };\n}\n"]}